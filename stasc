#!/usr/bin/ruby
require "optparse"
require "stringio"
require "xml/libxml"
require "set"

XML.default_line_numbers=true
XML::Error.reset_handler

# tags to be empty
$empty_tags = [
	"area",
	"base",
	"basefont",
	"br",
	"col",
	"hr",
	"img",
	"input",
	"isindex",
	"link",
	"meta",
	"param",
]

$ns = "http://tshibata.github.io/2013/stasc"

class AttributeName

	def initialize(name)
		@name = name
	end

	def getter(var)
		return "#{var}.getAttribute('#{@name}')"
	end

	def setter(var, value)
		return "#{var}.setAttribute('#{@name}',#{value})"
	end
end

class QualifiedAttributeName

	def initialize(namespace, localname)
		@namespace = namespace
		@localname = localname
	end

	def getter(var)
		return "#{var}.getAttributeNS('#{@namespace}','#{@localname}')"
	end

	def setter(var, value)
		return "#{var}.setAttributeNS('#{@namespace}','#{@localname}',#{value})"
	end
end

class PropertyName

	def initialize(name)
		@name = name
	end

	def getter(var)
		return "#{var}.#{@name}"
	end

	def setter(var, value)
		return "#{var}.#{@name}=#{value}"
	end
end

class Item

	def initialize(name, order, text)
		@name = name
		@order = order
		@text = text
	end

	def append(text)
		return false
	end

	def getValue()
		return "m#{@name}"
	end

	def output(var, args, names, proc, graft, accessor, composition)
		proc.puts "\tvar m#{@name}='#{@text}';"
		if @order
			i = @order.to_i
			if args.include?(i)
				raise "Error: argument #{i} is defined twice"
			end
			args.add(i)
			proc.puts "\tif(#{i}<arguments.length){"
			proc.puts "\t\tm#{@name}=arguments[#{i}];"
			proc.puts "\t}"
		end
		names.add(@name)
		proc.puts "\tObject.defineProperty(#{graft}, '#{@name}',{"
		proc.puts "\t\tset:function(v){m#{@name}=v;#{accessor.setter(var,composition)};},"
		proc.puts "\t\tget:function(){return m#{@name};}"
		proc.puts "\t});"
	end
end

class StaticItem

	def initialize(text)
		@text = text
	end

	def append(text)
		@text = @text + text
		return true
	end

	def getValue()
		text = @text.gsub(/\\/){"\\\\"}.gsub(/'/){"\\'"};
		return "'#{text}'"
	end

	def output(var, args, names, proc, graft, accessor, composition)
	end
end

class Format

	def initialize(node)
		@items = [StaticItem.new("")]
		node.each do |item|
			if item.text?
				if not @items[-1].append(item.content)
					@items.push(StaticItem.new(item.content))
				end
			elsif item.namespaces.namespace.href == $ns and item.name == "item"
				if item.children.size != 1
					raise "Error: item can contain only text"
				end
				if not item.children[0].text?
					raise "Error: item can contain only text"
				end
				@items.push(Item.new(item.attributes["name"], item.attributes["order"], item.content))
			else
				raise "Error: format can contain only texts and items"
			end
		end
		@composition = @items.map{|item| item.getValue()}.join("+")
	end

	def output(var, args, names, proc, graft, accessor)
		@items.each do |item|
			item.output(var, args, names, proc, graft, accessor, @composition)
		end
		proc.puts "\t#{accessor.setter(var,@composition)};"
	end
end

class NamedValue

	def initialize(node, target)
		@name = node.attributes["name"]
		@order = node.attributes["order"]
		children = node.children.delete_if{|child| (child.text? and child.content.strip.length == 0)}
		if @name
			if children.size != 0
				raise "Error: named (monolithic) #{node.name} must be empty"
			end
		else
			if @order
				raise "Error: no order of nameless (composite) #{node.name}"
			end
			if children.size != 1
				raise "Error: #{node.name} can contain only one format"
			end
			if children[0].namespaces.namespace.href != $ns or children[0].name != "format"
				raise "Error: #{node.name} can contain only one format"
			end
			@format = Format.new(children[0])
		end
		@target = target
	end

	def output(var, next_var, args, names, proc, graft)
		if @name
			if names.include?(@name)
				raise "Error: #{@name} is defined twice"
			end
			names.add(@name)
			proc.puts "\tObject.defineProperty(#{graft}, '#{@name}',{"
			proc.puts "\t\tset:function(v){#{@target.setter(var,'v')};},"
			proc.puts "\t\tget:function(){return #{@target.getter(var)};}"
			proc.puts "\t});"
			if @order
				i = @order.to_i
				if args.include?(i)
					raise "Error: argument #{i} is defined twice"
				end
				args.add(i)
				proc.puts "\tif(#{i}<arguments.length){"
				proc.puts "\t\t#{graft}.#{@name}=arguments[#{i}];"
				proc.puts "\t}"
			end
		else
			@format.output(var, args, names, proc, graft, @target)
		end
		return next_var
	end

	def putExtra(proc, var, child_var)
	end
end

class Bond

	def initialize(node)
		@name = node.attributes["name"]
	end

	def output(var, next_var, args, names, proc, graft)
		if names.include?(@name)
			raise "Error: #{@name} is defined twice"
		end
		names.add(@name)
		proc.puts "\tObject.defineProperty(#{graft},'#{@name}',{"
		proc.puts "\t\tget:function(){return #{var};}"
		proc.puts "\t});"
		return next_var
	end

	def putExtra(proc, var, child_var)
	end
end

class Plug

	def initialize(parent, node)
		@name = node.attributes["name"]
		@order = node.attributes["order"]
		if $empty_tags.include?(parent.name.downcase)
			puts "Warning: #{parent.name} should be empty (line #{parent.line_num})"
		end
		children = node.children.delete_if{|child| (child.text? and child.content.strip.length == 0)}
		if children.size == 0
			raise "Error: no element in a plug at #{node.line_num}"
		elsif 1 < children.size
			raise "Error: more than one element in a plug at #{node.line_num}"
		end
		@element = Element.new(parent, children[0])
	end

	def output(var, next_var, args, names, proc, graft)
		child_var = next_var
		next_var = @element.output(var, next_var, args, names, proc, nil)
		if names.include?(@name)
			raise "Error: #{@name} is defined twice"
		end
		names.add(@name)
		proc.puts "\tObject.defineProperty(#{graft},'#{@name}',{"
		proc.puts "\t\tset:function(v){#{var}.replaceChild(v,n#{child_var});n#{child_var}=v;},"
		proc.puts "\t\tget:function(){return n#{child_var};}"
		proc.puts "\t});"
		proc.puts "\t#{var}.appendChild(n#{child_var});"
		if @order
			i = @order.to_i
			if args.include?(i)
				raise "Error: argument #{i} is defined twice"
			end
			args.add(i)
			proc.puts "\tif(#{i}<arguments.length){"
			proc.puts "\t\t#{graft}.#{@name}=arguments[#{i}];"
			proc.puts "\t}"
		end
		return next_var
	end

	def putExtra(proc, var, child_var)
	end
end

class Text

	def initialize(node)
		@text = node.content
	end

	def output(var, next_var, args, names, proc, graft)
		text = @text.strip.gsub(/\s+/," ").gsub(/\\/){"\\\\"}.gsub(/'/){"\\'"};
		if not text.empty? # FIXME: option
			proc.puts "\t#{var}.appendChild(document.createTextNode('#{text}'));"
		end
		return next_var
	end

	def putExtra(proc, var, child_var)
	end
end

class Element

	def initialize(parent, node)
		if parent and $empty_tags.include?(parent.name.downcase)
			puts "Warning: #{parent.name} should be empty (line #{parent.line_num})"
		end
		ns = node.namespaces.namespace
		if ns
			@namespace = ns.href
			@localname = node.name
		else
			@name = node.name
		end
		@attributes = []
		node.attributes.each do |attribute|
			ns = attribute.namespaces.namespace
			if ns
				@attributes.push([QualifiedAttributeName.new(ns.href, attribute.name), attribute.value])
			else
				@attributes.push([AttributeName.new(attribute.name), attribute.value])
			end
		end
		@children = []
		node.each do |child|
			childNS = child.namespaces.namespace
			if childNS && childNS.href == $ns
				if child.name == "plug"
					@children.push(Plug.new(node, child))
				elsif child.name == "bond"
					@children.push(Bond.new(child))
				elsif child.name == "attribute"
					target = child.attributes["target"]
					if /([^:]*):(.*)/ =~ target
						ns = child.namespaces.find_by_prefix($1)
						name = $2
						@children.push(NamedValue.new(child, QualifiedAttributeName.new(ns.href, name)))
					else
						@children.push(NamedValue.new(child, AttributeName.new(target)))
					end
				elsif child.name == "property"
					@children.push(NamedValue.new(child, PropertyName.new(child.attributes["target"])))
				else
					raise "Error: unknown stasc tag at #{child.line_num}"
				end
			elsif child.node_type == LibXML::XML::Node::TEXT_NODE
				@children.push(Text.new(child))
			elsif child.node_type == LibXML::XML::Node::ELEMENT_NODE
				@children.push(Element.new(node, child))
			end
		end
	end

	def output(var, next_var, args, names, proc, graft)
		child_var = next_var
		var = "n#{next_var}"
		next_var = next_var + 1
		if not graft
			graft = var;
		end
		if @namespace
			proc.puts "\tvar #{var}=document.createElementNS('#{@namespace}','#{@localname}');"
		else
			proc.puts "\tvar #{var}=document.createElement('#{@name}');"
		end
		@attributes.each do |attribute|
			proc.puts "\t#{attribute[0].setter(var,"'#{attribute[1]}'")};"
		end
		@children.each do |child|
			child_var = next_var
			next_var = child.output(var, next_var, args, names, proc, graft)
			child.putExtra(proc, var, child_var)
		end
		return next_var
	end

	def putExtra(proc, var, child_var)
		proc.puts "\t#{var}.appendChild(n#{child_var});"
	end
end

begin
	opt = OptionParser.new
	Version = 1.5

	$a = "Stasc-a.js" if File.exists?("Stasc-a.js") # default value
	opt.on("-a file", "--after file") do |v|
		$a = v
	end

	$b = "Stasc-b.js" if File.exists?("Stasc-b.js") # default value
	opt.on("-b file", "--before file") do |v|
		$b = v
	end

	$notice = "generated by stasc #{Version}" # default value
	opt.on("-n file", "--notice file") do |v|
		$stderr.puts "Warning: -n is deplicated"
		File.open(v) do |file|
			$notice = file.read
		end
	end

	$output = "Stasc.js" # default value
	opt.on("-o file", "--output file") do |v|
		$output = v
	end

	$prefix = "" # default value
	opt.on("-p prefix", "--prefix prefix") do |v|
		$prefix = v
	end

	opt.parse!(ARGV)

	buf = StringIO.new
	buf.puts "/* #{$notice} */" if 0 < $notice.length
	if $a
		File.open($a) do |file|
			buf.puts file.read
		end
	end
	(ARGV.empty? ? Dir.glob("*.ss.xml").sort : ARGV).each do |src|
		begin
			dir = File.dirname(src)
			sym = File.basename(src, ".ss.xml")
			doc = XML::Document.file(src)
			buf.puts "#{$prefix}#{sym}=function(){"
			names = Set.new()
			args = Set.new()
			io = StringIO.new()
			element = Element.new(nil, doc.root)
			element.output("", 0, args, names, io, nil)
			if not (args.sort == Array(0...args.size))
				raise "Unused argument(s)"
			end
			buf.puts io.string
			buf.puts "\treturn n0;"
			buf.puts "};"
		rescue Exception => exception
			raise "#{exception} in #{src}"
		end
	end
	if $b
		File.open($b) do |file|
			buf.puts file.read
		end
	end
	File.open($output, "w:utf-8") do |js|
		js.puts buf.string
	end
rescue Exception => exception
	$stderr.puts exception
	exit 1
end

